import streamlit as st
import requests
import qdrant_client
from sentence_transformers import SentenceTransformer
import os
from datetime import datetime

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Streamlit Secrets ---
try:
    if st.secrets.get("runtime", {}).get("environment") == "production":
        st.success("‚úÖ Production mode: Using secure secrets")
        QDRANT_PATH = st.secrets["qdrant"]["path"]
        YANDEX_TRANSLATE_API_KEY = st.secrets["api_keys"]["yandex_translate"]
        API_KEY = st.secrets["api_keys"]["yandex_gpt"]
        FOLDER_ID = st.secrets["api_keys"]["folder_id"]
    else:
        QDRANT_PATH = st.secrets["qdrant"]["path"]
        YANDEX_TRANSLATE_API_KEY = st.secrets["api_keys"]["yandex_translate"]
        API_KEY = st.secrets["api_keys"]["yandex_gpt"] 
        FOLDER_ID = st.secrets["api_keys"]["folder_id"]
except Exception as e:
    st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    st.stop()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
COLLECTION_NAME = "tv_shows"
MODEL_NAME = 'all-MiniLM-L6-v2'

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ ---
@st.cache_resource
def initialize_qdrant_client(db_path):
    st.write("üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Qdrant –∫–ª–∏–µ–Ω—Ç–∞")
    st.write("1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏...")
    lock_file = os.path.join(db_path, '.lock')
    if os.path.exists(lock_file):
        try:
            os.remove(lock_file)
            st.write("   ‚úÖ –§–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É–¥–∞–ª–µ–Ω")
        except OSError as e:
            st.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
    st.write("2. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ Qdrant...")
    return qdrant_client.QdrantClient(path=db_path)

client = initialize_qdrant_client(QDRANT_PATH)
embedding_model = SentenceTransformer(MODEL_NAME)

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π ---
def check_api_keys():
    if not all([API_KEY, FOLDER_ID, YANDEX_TRANSLATE_API_KEY]):
        st.error("‚ùå –ù–µ –≤—Å–µ API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ secrets.toml")
        return False
    return True

# --- –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ ---
def translate_text(text, target_lang="ru"):
    if not check_api_keys():
        return text
        
    st.write("üîπ –ó–∞–ø—Ä–æ—Å –∫ Yandex Translate API")
    url = "https://translate.api.cloud.yandex.net/translate/v2/translate"
    headers = {
        "Authorization": f"Api-Key {YANDEX_TRANSLATE_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "texts": [text],
        "targetLanguageCode": target_lang
    }
    
    try:
        response = requests.post(url, headers=headers, json=data, timeout=10)
        if response.status_code == 200:
            st.write("   ‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            return response.json()["translations"][0]["text"]
        else:
            st.error(f"   ‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
    except Exception as e:
        st.error(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
    return text

# --- –ü–æ–∏—Å–∫ –≤ Qdrant ---
def search_in_qdrant(query, top_k=3):
    st.write("üîπ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞")
    query_vector = embedding_model.encode(query).tolist()
    
    st.write(f"üîπ –ü–æ–∏—Å–∫ –≤ Qdrant (—Ç–æ–ø-{top_k} –¥–ª—è '{query}')")
    
    try:
        search_result = client.search(
            collection_name=COLLECTION_NAME,
            query_vector=query_vector,
            limit=top_k
        )
        st.write(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(search_result)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        return [hit.payload for hit in search_result]
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Qdrant: {str(e)}")
        return []

# --- –ó–∞–ø—Ä–æ—Å –∫ YandexGPT ---
def ask_yandex_gpt(user_query, context, check_rag=False):
    if not context:
        return "No relevant shows found."
    
    if not check_api_keys():
        return "API keys not configured"
        
    st.write("üîπ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è YandexGPT")
    context_str = "\n".join([
        f"- Title: {show.get('title', 'N/A')}, Genres: {show.get('genres', 'N/A')}, Description: {show.get('description', 'N/A')}" 
        for show in context
    ])

    system_prompt = """You are a TV show recommendation assistant. 
    Answer based ONLY on the context provided below. 
    If you don't know the answer, say 'I don't have enough information'."""
    
    final_prompt = f"Context:\n{context_str}\n\nUser question: {user_query}"

    if check_rag:
        system_prompt += "\n\nIMPORTANT: You must ONLY use information from the provided context!"
        return system_prompt, final_prompt, context_str

    st.write("üîπ –ó–∞–ø—Ä–æ—Å –∫ YandexGPT API")
    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Authorization": f"Api-Key {API_KEY}",
        "x-folder-id": FOLDER_ID,
        "Content-Type": "application/json"
    }
    data = {
        "modelUri": f"gpt://{FOLDER_ID}/yandexgpt-lite/latest",
        "completionOptions": {"temperature": 0.4, "maxTokens": 2000},
        "messages": [
            {"role": "system", "text": system_prompt},
            {"role": "user", "text": final_prompt}
        ]
    }
    
    try:
        response = requests.post(url, headers=headers, json=data, timeout=15)
        response.raise_for_status()
        st.write("   ‚úÖ –û—Ç–≤–µ—Ç –æ—Ç YandexGPT –ø–æ–ª—É—á–µ–Ω")
        return response.json()['result']['alternatives'][0]['message']['text']
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ YandexGPT: {str(e)}")
        return f"Error: {str(e)}"

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã ---
def show_system_architecture():
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º—ã
    is_dark = st._config.get("theme", {}).get("base") == "dark"
    
    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Å—Ç–∏–ª–∏
    theme_css = f"""
    <style>
        .component-card {{
            background: {"#2a2a2a" if is_dark else "white"};
            border-radius: 10px;
            padding: 15px;
            margin: 10px 0;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            border-left: 4px solid {"#4CAF50" if is_dark else "#2e7d32"};
            color: {"white" if is_dark else "#333333"};
        }}
        .flow-arrow {{
            text-align: center;
            margin: 5px 0;
            color: {"#64B5F6" if is_dark else "#2196F3"};
            font-size: 24px;
        }}
        .diagram-box {{
            background: {"#333333" if is_dark else "#f8f9fa"};
            padding: 15px;
            border-radius: 10px;
            margin-top: 30px;
            color: {"white" if is_dark else "#333333"};
        }}
        pre {{
            background: {"#1e1e1e" if is_dark else "white"} !important;
            color: {"#f0f0f0" if is_dark else "#333333"} !important;
            border: 1px solid {"#555" if is_dark else "#ddd"} !important;
        }}
    </style>
    """
    st.markdown(theme_css, unsafe_allow_html=True)

    st.header("üîß –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ RAG-—Å–∏—Å—Ç–µ–º—ã")
    
    # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
    components = [
        {"title": "1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥", "desc": "–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'comedy about space')"},
        {"title": "2. –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞", "desc": "–ú–æ–¥–µ–ª—å SentenceTransformer –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –≤–µ–∫—Ç–æ—Ä"},
        {"title": "3. –ü–æ–∏—Å–∫ –≤ Qdrant", "desc": "–ü–æ–∏—Å–∫ —Å–µ—Ä–∏–∞–ª–æ–≤ –ø–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–º—É —Å—Ö–æ–¥—Å—Ç–≤—É"},
        {"title": "4. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞", "desc": "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è LLM"},
        {"title": "5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ (YandexGPT)", "desc": "–°—Ç—Ä–æ–≥–æ –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"},
        {"title": "6. –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞", "desc": "Yandex Translate API ‚Üí —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫"},
        {"title": "7. –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", "desc": "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"}
    ]

    for comp in components:
        st.markdown(f"""
        <div class="component-card">
            <h3>{comp['title']}</h3>
            <p>{comp['desc']}</p>
        </div>
        """, unsafe_allow_html=True)
        if comp != components[-1]:
            st.markdown('<div class="flow-arrow">‚Üì</div>', unsafe_allow_html=True)

    # –î–∏–∞–≥—Ä–∞–º–º–∞
    st.markdown("""
    <div class="diagram-box">
        <h3>üìå –î–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</h3>
        <pre>
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Üí Streamlit ‚Üí –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ‚Üí Qdrant ‚Üí –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ‚Üí YandexGPT ‚Üí –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ ‚Üí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        </pre>
    </div>
    """, unsafe_allow_html=True)

    with st.expander("üìö –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ RAG", expanded=False):
        st.markdown("""
        **Retrieval-Augmented Generation (RAG)** —Å–æ—á–µ—Ç–∞–µ—Ç:
        - –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        - –ì–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        
        **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
        - –ù–µ—Ç "–≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π" –º–æ–¥–µ–ª–∏
        - –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
        - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–≤—É—è–∑—ã—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        """)

    with st.expander("üõ† –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", expanded=False):
        cols = st.columns(2)
        with cols[0]:
            st.markdown("""
            **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:**
            - üóÑÔ∏è Qdrant
            - ü§ñ Sentence Transformers
            - üß† YandexGPT API
            - üåç Yandex Translate API
            """)
        with cols[1]:
            st.markdown("""
            **–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞:**
            - üêç Python 3.10+
            - üöÄ Streamlit
            - üîê Yandex Cloud
            """)

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
def main():
    st.title("üé¨ TV Show Recommendation Bot")
    st.warning("‚ö†Ô∏è –ë–∞–∑–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º! –í–≤–æ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'comedy about space')")
    
    if "last_key_rotation" not in st.session_state:
        st.session_state.last_key_rotation = datetime(2025, 9, 8)
    
    if (datetime.now() - st.session_state.last_key_rotation).days > 90:
        st.warning(f"üö® –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–º–µ–Ω–∏—Ç—å API –∫–ª—é—á–∏! –ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–æ—Ç–∞—Ü–∏—è: {st.session_state.last_key_rotation.strftime('%d.%m.%Y')}")

    tab1, tab2, tab3 = st.tabs(["üîç –ü–æ–∏—Å–∫ —Å–µ—Ä–∏–∞–ª–æ–≤", "üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ RAG", "üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞"])

    with tab1:
        user_query = st.text_input("**Your query (in English):**", "recommend a series about space and aliens")
        if st.button("Search"):
            if not check_api_keys():
                return
                
            with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞..."):
                shows = search_in_qdrant(user_query)
                if shows:
                    st.subheader("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
                    st.json(shows, expanded=True)

                    st.subheader("ü§ñ –û—Ç–≤–µ—Ç YandexGPT")
                    gpt_response = ask_yandex_gpt(user_query, shows)
                    col1, col2 = st.columns(2)
                    with col1:
                        st.text_area("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", gpt_response, height=200)
                    with col2:
                        st.text_area("–†—É—Å—Å–∫–∏–π", translate_text(gpt_response), height=200)
                else:
                    st.warning("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    with tab2:
        st.subheader("–ü—Ä–æ–≤–µ—Ä–∫–∞ RAG")
        test_query = st.text_input("–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:", "What can you tell me about these shows?")
        if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"):
            if not check_api_keys():
                return
                
            with st.spinner("–ê–Ω–∞–ª–∏–∑..."):
                shows = search_in_qdrant("comedy series", top_k=2)
                if shows:
                    system_prompt, final_prompt, context = ask_yandex_gpt(test_query, shows, True)
                    
                    st.subheader("üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã RAG")
                    with st.expander("System Prompt"):
                        st.code(system_prompt, language="text")
                    with st.expander("–ö–æ–Ω—Ç–µ–∫—Å—Ç"):
                        st.code(context, language="text")
                    with st.expander("–ü–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç"):
                        st.code(final_prompt, language="text")
                else:
                    st.warning("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")

    with tab3:
        show_system_architecture()

if __name__ == "__main__":
    main()