import streamlit as st
import requests
import qdrant_client
from sentence_transformers import SentenceTransformer
import os
from datetime import datetime
import re
import torch
import time
from random import choice

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã ---
def setup_dark_theme():
    st.set_page_config(
        page_title="üé¨ TV Show Recommendation Bot",
        page_icon="üé¨",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # –ò–Ω—ä–µ–∫—Ü–∏—è CSS –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
    st.markdown("""
    <style>
        /* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ */
        .stApp {
            background-color: #0E1117;
            color: #FAFAFA;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
        }
        
        /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ */
        h1, h2, h3, h4, h5, h6 {
            color: #FFFFFF;
            font-weight: 600;
            margin-bottom: 0.75rem;
        }
        
        /* –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç */
        p, div, span, label {
            color: #E0E0E0 !important;
        }
        
        /* –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ */
        .stTextInput>div>div>input {
            border: 1px solid #444;
            border-radius: 8px;
            padding: 10px 12px;
            font-size: 14px;
            color: #FFFFFF;
            background-color: #1E1E1E;
        }
        
        /* –ö–Ω–æ–ø–∫–∏ */
        .stButton>button {
            background-color: #1DB954;
            color: #000000 !important;
            border: none;
            border-radius: 8px;
            padding: 8px 16px;
            font-weight: 500;
            font-size: 14px;
            transition: all 0.2s;
        }
        .stButton>button:hover {
            background-color: #1ED760;
            transform: translateY(-1px);
        }
        
        /* –ö–∞—Ä—Ç–æ—á–∫–∏ */
        .card {
            background: #1E1E1E;
            border-radius: 8px;
            border: 1px solid #333;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        
        /* –í–∫–ª–∞–¥–∫–∏ */
        .stTabs [data-baseweb="tab-list"] {
            gap: 8px;
            padding: 0;
            border-bottom: none;
        }
        .stTabs [data-baseweb="tab"] {
            padding: 10px 16px;
            border-radius: 8px;
            background-color: #333;
            color: #E0E0E0 !important;
            border: none;
            margin: 0;
        }
        .stTabs [aria-selected="true"] {
            background-color: #1DB954;
            color: #000000 !important;
        }
        
        /* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */
        .stAlert {
            border-radius: 8px;
            padding: 12px 16px;
            border: 1px solid #444;
        }
        .stAlert [data-testid="stMarkdownContainer"] {
            color: inherit !important;
        }
        
        /* JSON viewer */
        .stJson {
            border-radius: 8px;
            border: 1px solid #444;
            background-color: #1E1E1E !important;
        }
        
        /* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */
        .stProgress>div>div>div {
            background-color: #1DB954;
        }
        
        /* –í—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏ */
        .stSelectbox>div>div>div {
            color: #FFFFFF;
            background-color: #1E1E1E;
        }
        
        /* –•–æ–≤–µ—Ä-—ç—Ñ—Ñ–µ–∫—Ç—ã */
        .stButton>button:hover, .stTabs [data-baseweb="tab"]:hover {
            opacity: 0.9;
        }
        
        /* –ê–Ω–∏–º–∞—Ü–∏–∏ */
        @keyframes shake {
            0%, 100% {transform: translateX(0);}
            10%, 30%, 50%, 70%, 90% {transform: translateX(-5px);}
            20%, 40%, 60%, 80% {transform: translateX(5px);}
        }
        .shake {
            animation: shake 0.5s;
        }
        @keyframes rainbow {
            0% {color: red;}
            14% {color: orange;}
            28% {color: yellow;}
            42% {color: green;}
            57% {color: blue;}
            71% {color: indigo;}
            85% {color: violet;}
            100% {color: red;}
        }
        .rainbow {
            animation: rainbow 2s linear infinite;
        }
        @keyframes spin {
            0% {transform: rotate(0deg);}
            100% {transform: rotate(360deg);}
        }
        .spin {
            display: inline-block;
            animation: spin 1s linear infinite;
        }
    </style>
    """, unsafe_allow_html=True)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Streamlit Secrets ---
try:
    if st.secrets.get("runtime", {}).get("environment") == "production":
        st.success("‚úÖ Production mode: Using secure secrets")
        QDRANT_PATH = st.secrets["qdrant"]["path"]
        YANDEX_TRANSLATE_API_KEY = st.secrets["api_keys"]["yandex_translate"]
        API_KEY = st.secrets["api_keys"]["yandex_gpt"]
        FOLDER_ID = st.secrets["api_keys"]["folder_id"]
    else:
        QDRANT_PATH = st.secrets["qdrant"]["path"]
        YANDEX_TRANSLATE_API_KEY = st.secrets["api_keys"]["yandex_translate"]
        API_KEY = st.secrets["api_keys"]["yandex_gpt"] 
        FOLDER_ID = st.secrets["api_keys"]["folder_id"]
except Exception as e:
    st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    st.stop()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
COLLECTION_NAME = "tv_shows"
MODEL_NAME = 'all-MiniLM-L6-v2'

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ ---
@st.cache_resource
def initialize_qdrant_client(db_path):
    st.info("üîπ **–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Qdrant –∫–ª–∏–µ–Ω—Ç–∞**")
    st.info("1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏...")
    lock_file = os.path.join(db_path, '.lock')
    if os.path.exists(lock_file):
        try:
            os.remove(lock_file)
            st.success("‚úÖ –§–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É–¥–∞–ª–µ–Ω")
        except OSError as e:
            st.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
    st.info("2. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ Qdrant...")
    return qdrant_client.QdrantClient(path=db_path)

try:
    client = initialize_qdrant_client(QDRANT_PATH)
    embedding_model = SentenceTransformer(MODEL_NAME, device='cpu')
    st.success("‚úÖ –ú–æ–¥–µ–ª–∏ –∏ –∫–ª–∏–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
except Exception as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
    st.stop()

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π ---
def check_api_keys():
    if not all([API_KEY, FOLDER_ID, YANDEX_TRANSLATE_API_KEY]):
        st.error("‚ùå –ù–µ –≤—Å–µ API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ secrets.toml")
        return False
    return True

# --- –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ ---
def is_russian(text):
    return bool(re.search('[–∞-—è–ê-–Ø]', text))

# --- –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ ---
def translate_text(text, target_lang="ru", source_lang=None):
    if not check_api_keys():
        return text
        
    st.info(f"üîπ **–ó–∞–ø—Ä–æ—Å –∫ Yandex Translate API ({source_lang or 'auto'} -> {target_lang})**")
    url = "https://translate.api.cloud.yandex.net/translate/v2/translate"
    headers = {
        "Authorization": f"Api-Key {YANDEX_TRANSLATE_API_KEY}",
        "Content-Type": "application/json"
    }
    
    data = {
        "texts": [text],
        "targetLanguageCode": target_lang
    }
    
    if source_lang:
        data["sourceLanguageCode"] = source_lang
    
    try:
        response = requests.post(url, headers=headers, json=data, timeout=10)
        if response.status_code == 200:
            st.success("‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            return response.json()["translations"][0]["text"]
        else:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            return text
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
        return text

# --- –ü–æ–∏—Å–∫ –≤ Qdrant ---
def search_in_qdrant(query, top_k=3):
    try:
        st.info("üîπ **–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞**")
        query_vector = embedding_model.encode(query, convert_to_tensor=True).cpu().numpy().tolist()
        
        st.info("üîπ **–ü–æ–∏—Å–∫ –≤ Qdrant**")
        st.info(f"–ò—â–µ–º {top_k} –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{query}'")
        
        search_result = client.search(
            collection_name=COLLECTION_NAME,
            query_vector=query_vector,
            limit=top_k
        )
        st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(search_result)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        return [hit.payload for hit in search_result]
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Qdrant: {str(e)}")
        return []

# --- –ó–∞–ø—Ä–æ—Å –∫ YandexGPT ---
def ask_yandex_gpt(user_query, context, check_rag=False):
    if not context:
        return "According to our TV shows database: No relevant shows found."
    
    if not check_api_keys():
        return "API keys not configured"
        
    st.info("üîπ **–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è YandexGPT**")
    context_str = "\n".join([
        f"- Title: {show.get('title', 'N/A')}, Genres: {show.get('genres', 'N/A')}, Description: {show.get('description', 'N/A')}" 
        for show in context
    ])

    system_prompt = """You are a TV show recommendation assistant working with our TV shows database. 
    Always begin your response with: "According to our TV shows database:"
    Then provide recommendations based ONLY on the context provided below. 
    If you don't know the answer, say 'I don't have enough information in our database'.
    
    Important rules:
    1. Never mention that you're an AI assistant
    2. Always refer to "our database" when providing information
    3. Keep responses concise but informative
    4. If multiple shows match, list them with brief descriptions
    
    Context:
    """ + context_str
    
    final_prompt = f"User question: {user_query}"

    if check_rag:
        return system_prompt, final_prompt, context_str

    st.info("üîπ **–ó–∞–ø—Ä–æ—Å –∫ YandexGPT API**")
    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Authorization": f"Api-Key {API_KEY}",
        "x-folder-id": FOLDER_ID,
        "Content-Type": "application/json"
    }
    data = {
        "modelUri": f"gpt://{FOLDER_ID}/yandexgpt-lite/latest",
        "completionOptions": {"temperature": 0.4, "maxTokens": 2000},
        "messages": [
            {"role": "system", "text": system_prompt},
            {"role": "user", "text": final_prompt}
        ]
    }
    
    try:
        response = requests.post(url, headers=headers, json=data, timeout=15)
        response.raise_for_status()
        st.success("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç YandexGPT –ø–æ–ª—É—á–µ–Ω")
        return response.json()['result']['alternatives'][0]['message']['text']
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ YandexGPT: {str(e)}")
        return f"Error: {str(e)}"

# --- –í–µ—Å–µ–ª—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ —Ä—É—Å—Å–∫–æ–º –∑–∞–ø—Ä–æ—Å–µ ---
def show_funny_effect():
    effects = [
        lambda: st.markdown('<div class="shake">ü§™</div>', unsafe_allow_html=True),
        lambda: st.markdown('<div class="rainbow">üåà –ù—É –¥–∞–≤–∞–π, –Ω–µ —á–∏—Ç–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –ø–æ—Ç—Ä–∞—Ç—å –º–æ–∏ –º–∏–ª–ª–∏–æ–Ω —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥! üåà</div>', unsafe_allow_html=True),
        lambda: st.markdown('<div class="spin">üåÄ</div> –ù—É –¥–∞–≤–∞–π, –Ω–µ —á–∏—Ç–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –ø–æ—Ç—Ä–∞—Ç—å –º–æ–∏ –º–∏–ª–ª–∏–æ–Ω —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥!', unsafe_allow_html=True),
        lambda: st.balloons(),
        lambda: st.snow(),
        lambda: st.error("üí∏ –¢–æ–∫–µ–Ω—ã –≥–æ—Ä—è—Ç!"),
        lambda: st.warning("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç–æ–∏—Ç –¥–µ–Ω–µ–≥!"),
        lambda: st.success("üéâ –£—Ä–∞! –ï—â–µ –æ–¥–∏–Ω –ø–µ—Ä–µ–≤–æ–¥!"),
    ]
    
    chosen_effect = choice(effects)
    chosen_effect()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —Å—Ä–∞–∑—É –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –≤–µ—Å–µ–ª—å—è
    if choice([True, False]):
        time.sleep(0.5)
        choice(effects)()

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ---
def main():
    setup_dark_theme()
    
    st.title("üé¨ TV Show Recommendation Bot")
    st.markdown("""
    <div class="card">
        <p>–ù–∞–π–¥–∏—Ç–µ –∏–¥–µ–∞–ª—å–Ω—ã–π —Å–µ—Ä–∏–∞–ª —Å –ø–æ–º–æ—â—å—é AI. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º - –≤–≤–æ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∏–ª–∏ –≤–≤–µ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –ø–æ—Å–º–æ—Ç—Ä–∏ —á—Ç–æ –±—É–¥–µ—Ç üòà</p>
    </div>
    """, unsafe_allow_html=True)
    
    if "last_key_rotation" not in st.session_state:
        st.session_state.last_key_rotation = datetime(2025, 9, 8)
    
    if (datetime.now() - st.session_state.last_key_rotation).days > 90:
        st.warning(f"üö® –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–º–µ–Ω–∏—Ç—å API –∫–ª—é—á–∏! –ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–æ—Ç–∞—Ü–∏—è: {st.session_state.last_key_rotation.strftime('%d.%m.%Y')}")

    tab1, tab2 = st.tabs(["üîç –ü–æ–∏—Å–∫ —Å–µ—Ä–∏–∞–ª–æ–≤", "üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ RAG"])

    with tab1:
        st.markdown("### –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ —Å–µ—Ä–∏–∞–ª–æ–≤")
        st.markdown("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'sci-fi series with aliens') –∏–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º (–Ω–æ –º—ã –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–ª–∏!)")
        
        user_query = st.text_input("**–í–∞—à –∑–∞–ø—Ä–æ—Å:**", "recommend a series about space and aliens", key="query_input")

        if st.button("–ü–æ–∏—Å–∫", key="search_btn"):
            if not check_api_keys():
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏ –≤ secrets.toml")
                return
                
            with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞..."):
                st.session_state.was_russian = is_russian(user_query)
                original_query = user_query
                
                if st.session_state.was_russian:
                    show_funny_effect()
                    st.markdown("""
                    <div class="card" style="border: 2px solid #ff0000;">
                        <p style="color: #ff0000; font-weight: bold;">–ù—É –¥–∞–≤–∞–π, –Ω–µ —á–∏—Ç–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –ø–æ—Ç—Ä–∞—Ç—å –º–æ–∏ –º–∏–ª–ª–∏–æ–Ω —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥! üò≠</p>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    user_query = translate_text(user_query, target_lang="en", source_lang="ru")
                    st.markdown(f"""
                    <div class="card">
                        <p><strong>–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å:</strong> {user_query}</p>
                    </div>
                    """, unsafe_allow_html=True)
                
                st.markdown("### –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–µ—Ä–∏–∞–ª—ã")
                shows = search_in_qdrant(user_query)
                if shows:
                    with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ"):
                        st.json(shows, expanded=True)

                    st.markdown("### –û—Ç–≤–µ—Ç AI")
                    gpt_response_en = ask_yandex_gpt(user_query, shows)
                    st.markdown(f"""
                    <div class="card">
                        <p><strong>–û—Ç–≤–µ—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:</strong></p>
                        <p>{gpt_response_en}</p>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    st.session_state.gpt_response_en = gpt_response_en

                    if st.session_state.was_russian:
                        st.markdown("### –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞")
                        gpt_response_ru = translate_text(gpt_response_en, target_lang="ru", source_lang="en")
                        st.markdown(f"""
                        <div class="card">
                            <p><strong>–û—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º:</strong></p>
                            <p>{gpt_response_ru}</p>
                        </div>
                        """, unsafe_allow_html=True)
                        st.session_state.gpt_response_ru = gpt_response_ru
                else:
                    st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ—Ä–∏–∞–ª—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É")
        
        if ('was_russian' in st.session_state and not st.session_state.was_russian and 
            'gpt_response_en' in st.session_state):
            if st.button("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π", key="translate_btn"):
                with st.spinner("–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞..."):
                    show_funny_effect()
                    gpt_response_ru = translate_text(st.session_state.gpt_response_en, target_lang="ru", source_lang="en")
                    st.session_state.gpt_response_ru = gpt_response_ru
                    st.markdown("### –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞")
                    st.markdown(f"""
                    <div class="card">
                        <p><strong>–û—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º:</strong></p>
                        <p>{gpt_response_ru}</p>
                    </div>
                    """, unsafe_allow_html=True)

    with tab2:
        st.markdown("### –ü—Ä–æ–≤–µ—Ä–∫–∞ RAG-—Å–∏—Å—Ç–µ–º—ã")
        st.markdown("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏ –º–æ–¥–µ–ª—å —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")
        
        test_query = st.text_input("–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:", "What can you tell me about these shows?", key="test_query")
        
        if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å RAG", key="rag_btn"):
            if not check_api_keys():
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏ –≤ secrets.toml")
                return
                
            with st.spinner("–ê–Ω–∞–ª–∏–∑ RAG-—Å–∏—Å—Ç–µ–º—ã..."):
                shows = search_in_qdrant(
                    st.session_state.get("query_input", "comedy series"), 
                    top_k=2
                )
                
                if shows:
                    system_prompt, final_prompt, context_str = ask_yandex_gpt(
                        test_query, 
                        shows, 
                        check_rag=True
                    )
                    
                    st.markdown("### –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã RAG")
                    with st.expander("System Prompt"):
                        st.markdown(f"""
                        <div class="card">
                            <p>{system_prompt}</p>
                        </div>
                        """, unsafe_allow_html=True)
                    
                    with st.expander("–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã"):
                        st.markdown(f"""
                        <div class="card">
                            <p>{context_str}</p>
                        </div>
                        """, unsafe_allow_html=True)
                    
                    with st.expander("–§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç"):
                        st.markdown(f"""
                        <div class="card">
                            <p>{final_prompt}</p>
                        </div>
                        """, unsafe_allow_html=True)
                    
                    st.success("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ system prompt —è–≤–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç!")
                else:
                    st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ RAG")

if __name__ == "__main__":
    main()
