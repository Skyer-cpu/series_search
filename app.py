import streamlit as st
import requests
import qdrant_client
from sentence_transformers import SentenceTransformer
import os
from datetime import datetime
import re
import torch

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Streamlit Secrets ---
try:
    if st.secrets.get("runtime", {}).get("environment") == "production":
        st.success("‚úÖ Production mode: Using secure secrets")
        QDRANT_PATH = st.secrets["qdrant"]["path"]
        YANDEX_TRANSLATE_API_KEY = st.secrets["api_keys"]["yandex_translate"]
        API_KEY = st.secrets["api_keys"]["yandex_gpt"]
        FOLDER_ID = st.secrets["api_keys"]["folder_id"]
    else:
        QDRANT_PATH = st.secrets["qdrant"]["path"]
        YANDEX_TRANSLATE_API_KEY = st.secrets["api_keys"]["yandex_translate"]
        API_KEY = st.secrets["api_keys"]["yandex_gpt"] 
        FOLDER_ID = st.secrets["api_keys"]["folder_id"]
except Exception as e:
    st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    st.stop()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
COLLECTION_NAME = "tv_shows"
MODEL_NAME = 'all-MiniLM-L6-v2'

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ ---
@st.cache_resource
def initialize_qdrant_client(db_path):
    try:
        lock_file = os.path.join(db_path, '.lock')
        if os.path.exists(lock_file):
            os.remove(lock_file)
        return qdrant_client.QdrantClient(path=db_path)
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Qdrant: {str(e)}")
        st.stop()

try:
    client = initialize_qdrant_client(QDRANT_PATH)
    embedding_model = SentenceTransformer(MODEL_NAME, device='cpu')
except Exception as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: {str(e)}")
    st.stop()

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π ---
def check_api_keys():
    return all([API_KEY, FOLDER_ID, YANDEX_TRANSLATE_API_KEY])

# --- –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ ---
def is_russian(text):
    return bool(re.search('[–∞-—è–ê-–Ø]', text))

# --- –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ ---
def translate_text(text, target_lang="ru", source_lang=None):
    if not check_api_keys():
        return text
        
    url = "https://translate.api.cloud.yandex.net/translate/v2/translate"
    headers = {
        "Authorization": f"Api-Key {YANDEX_TRANSLATE_API_KEY}",
        "Content-Type": "application/json"
    }
    
    data = {
        "texts": [text],
        "targetLanguageCode": target_lang
    }
    
    if source_lang:
        data["sourceLanguageCode"] = source_lang
    
    try:
        response = requests.post(url, headers=headers, json=data, timeout=10)
        if response.status_code == 200:
            return response.json()["translations"][0]["text"]
    except Exception:
        pass
    return text

# --- –ü–æ–∏—Å–∫ –≤ Qdrant ---
def search_in_qdrant(query, top_k=3):
    try:
        query_vector = embedding_model.encode(query, convert_to_tensor=True).cpu().numpy().tolist()
        search_result = client.search(
            collection_name=COLLECTION_NAME,
            query_vector=query_vector,
            limit=top_k
        )
        return [hit.payload for hit in search_result]
    except Exception:
        return []

# --- –ó–∞–ø—Ä–æ—Å –∫ YandexGPT ---
def ask_yandex_gpt(user_query, context, check_rag=False):
    if not context or not check_api_keys():
        return "No relevant shows found" if not check_rag else ("", "", "")
        
    context_str = "\n".join([
        f"- Title: {show.get('title', 'N/A')}, Genres: {show.get('genres', 'N/A')}, Description: {show.get('description', 'N/A')}" 
        for show in context
    ])

    system_prompt = """You are a TV show recommendation assistant. 
    Answer based ONLY on the context provided below."""
    
    final_prompt = f"Context:\n{context_str}\n\nUser question: {user_query}"

    if check_rag:
        system_prompt += "\n\nIMPORTANT: You must ONLY use information from the provided context!"
        return system_prompt, final_prompt, context_str

    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Authorization": f"Api-Key {API_KEY}",
        "x-folder-id": FOLDER_ID,
        "Content-Type": "application/json"
    }
    data = {
        "modelUri": f"gpt://{FOLDER_ID}/yandexgpt-lite/latest",
        "completionOptions": {"temperature": 0.4, "maxTokens": 2000},
        "messages": [
            {"role": "system", "text": system_prompt},
            {"role": "user", "text": final_prompt}
        ]
    }
    
    try:
        response = requests.post(url, headers=headers, json=data, timeout=15)
        return response.json()['result']['alternatives'][0]['message']['text']
    except Exception:
        return "Error processing request"

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ---
def main():
    st.title("üé¨ TV Show Recommendation Bot")
    
    tab1, tab2 = st.tabs(["üîç –ü–æ–∏—Å–∫ —Å–µ—Ä–∏–∞–ª–æ–≤", "üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ RAG"])

    with tab1:
        user_query = st.text_input("Your query (in English):", "recommend a series about space and aliens")
        
        if st.button("Search"):
            if not check_api_keys():
                st.error("API keys not configured")
                return
                
            with st.spinner("Processing..."):
                original_query = user_query
                if is_russian(user_query):
                    st.warning("Your text will be translated to English")
                    user_query = translate_text(user_query, target_lang="en", source_lang="ru")
                
                shows = search_in_qdrant(user_query)
                if shows:
                    st.subheader("Found shows (raw data)")
                    st.json(shows, expanded=False)

                    gpt_response = ask_yandex_gpt(user_query, shows)
                    st.subheader("YandexGPT Response")
                    st.write(gpt_response)

                    if is_russian(original_query):
                        st.write(translate_text(gpt_response, target_lang="ru", source_lang="en"))

    with tab2:
        st.subheader("RAG System Inspection")
        
        st.markdown("""
        ### –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ RAG?
        
        RAG (Retrieval-Augmented Generation) - —ç—Ç–æ —Å–∏—Å—Ç–µ–º–∞, –∫–æ—Ç–æ—Ä–∞—è:
        1. **–ò–∑–≤–ª–µ–∫–∞–µ—Ç** —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (Qdrant)
        2. **–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç** –¥–ª—è —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏
        3. **–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç**, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç

        –ù–∞ —ç—Ç–æ–π –≤–∫–ª–∞–¥–∫–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:
        - –ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏–∑ –±–∞–∑—ã
        - –ö–∞–∫ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è YandexGPT
        - –ü–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π –≤ —è–∑—ã–∫–æ–≤—É—é –º–æ–¥–µ–ª—å
        """)
        
        test_query = st.text_input("Test query:", "What can you tell me about these shows?")
        
        if st.button("Inspect RAG"):
            with st.spinner("Analyzing RAG components..."):
                shows = search_in_qdrant(
                    st.session_state.get("query_input", "comedy series"), 
                    top_k=2
                )
                
                if shows:
                    system_prompt, final_prompt, context_str = ask_yandex_gpt(
                        test_query, 
                        shows, 
                        check_rag=True
                    )
                    
                    st.subheader("RAG Components Breakdown")
                    
                    with st.expander("1. Retrieved Context Data"):
                        st.text_area("Data from Qdrant", context_str, height=200)
                        st.info("–≠—Ç–æ —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É")
                    
                    with st.expander("2. System Prompt"):
                        st.text_area("System instructions", system_prompt, height=150)
                        st.info("–≠—Ç–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é—Ç, —á—Ç–æ –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")
                    
                    with st.expander("3. Final Prompt to YandexGPT"):
                        st.text_area("Complete prompt", final_prompt, height=300)
                        st.info("–ü–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –≤–∫–ª—é—á–∞—é—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –≤–∞—à –≤–æ–ø—Ä–æ—Å")
                    
                    st.success("""
                    ‚úÖ RAG —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –µ—Å–ª–∏:
                    - –í System Prompt –µ—Å—Ç—å —á–µ—Ç–∫–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    - –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
                    - –ù–µ—Ç "–≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π" (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
                    """)
                else:
                    st.warning("No data retrieved for analysis")

if __name__ == "__main__":
    main()
